"use client"

import React, { useEffect, useState } from "react"
import ReactMarkdown from "react-markdown"
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "./ui/card"

type AppTimeData = {
  appName: string
  time: number
  fill: string
}

type DailyScreenTime = {
  date: string // Date in YYYY-MM-DD format
  totalTime: number // Total screen time in milliseconds
  appDistribution: Record<string, { time: number; fill: string }> // Time spent per app in milliseconds with color
}

type Props = {
  appTimeData: AppTimeData[]
  dailyScreenTimeData: DailyScreenTime[]
}

const systemPrompt = `
You are an AI assistant specialized in productivity analysis.
Your task is to analyze the user's screen time and app usage data, provide a detailed summary of their usage patterns, and offer actionable suggestions for improving productivity and reducing unnecessary screen time. 
Your response should include:
**Usage Summary:** Breakdown of total screen time and app usage distribution.
**Trends & Patterns:** Identify usage trends over days and highlight frequent and excessive usage.
**Productivity Assessment:** Evaluate whether the time spent on certain applications is productive or unproductive.
**Recommendations:** Provide practical strategies for optimizing screen time, reducing distractions, and increasing efficiency.
**Actionable Insights:** Specific goals or habits the user can implement to enhance productivity.

Ensure that your response is personalized, clear, and constructive.
`

const userPrompt = `
I have collected data on how I spend my time on different apps and my overall screen time per day. I want you to analyze this data and provide insights on:

- How much time I spend on each application.
- The overall trend of my screen time.
- Whether my screen time is excessive and how I can reduce it.
- Which apps are contributing the most to my usage.
- How I can improve my productivity by optimizing my time spent on apps.
- Any unhealthy usage patterns you notice.
- Suggestions for maintaining a healthier work-life balance.
`

const Summary = ({ appTimeData, dailyScreenTimeData }: Props) => {
  const [summary, setSummary] = useState<string>("")
  const [loading, setLoading] = useState<boolean>(false)

  const dataPrompt = `
**Here is my data:**
**Total App Usage Data:**
${JSON.stringify(appTimeData, null, 2)}

**Screen Time Per Day with App Distribution:**
${JSON.stringify(dailyScreenTimeData, null, 2)}

Please provide a structured and detailed analysis along with practical recommendations to improve my digital habits.
`

  const fetchSummary = async () => {
    setLoading(true)
    const response = await fetch(
      "https://openrouter.ai/api/v1/chat/completions",
      {
        method: "POST",
        headers: {
          Authorization:
            "Bearer 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",
          // "HTTP-Referer": "<YOUR_SITE_URL>", // Optional. Site URL for rankings on openrouter.ai.
          // "X-Title": "<YOUR_SITE_NAME>", // Optional. Site title for rankings on openrouter.ai.
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          model: "cognitivecomputations/dolphin3.0-r1-mistral-24b:free",
          messages: [
            {
              role: "system",
              content: systemPrompt,
            },
            {
              role: "user",
              content: [
                {
                  type: "text",
                  text: userPrompt + "\n" + dataPrompt,
                },
              ],
            },
          ],
        }),
      }
    )
    const data = await response.json()
    console.log("summary", data.choices[0].message.content)
    setSummary(data.choices[0].message.content)
    setLoading(false)
  }

  useEffect(() => {
    fetchSummary()
  }, [appTimeData, dailyScreenTimeData])

  return (
    <Card>
      <CardHeader>
        <CardTitle className="font-sans tracking-tighter font-semibold">
          Summary
        </CardTitle>
        <CardDescription>Analysis report generated by AI</CardDescription>
      </CardHeader>
      <CardContent>
        {!loading ? (
          <ReactMarkdown>{summary}</ReactMarkdown>
        ) : (
          <p>Loading...</p>
        )}
      </CardContent>
    </Card>
  )
}

export default Summary
